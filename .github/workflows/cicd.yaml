name: CI/CD
on:
  pull_request:
    branches: 
      - "main"
    paths:
      - "app/*/**"
  push:
    branches: 
      - "main"
    paths:
      - "app/*/**"
permissions:
  id-token: write
  contents: read
  pull-requests: read
jobs:
  CI:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: app
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Install PDM
        run: |
          python -m pip install --upgrade pip
          pip install pdm

      - name: Install dependencies
        run: pdm install --dev
      
      - name: Python Linting
        run: pdm run flake8 -v src tests
      
      # - name: Python Tests
      #   run: |
      #     pdm run pytest tests
  CD:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: CI
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    defaults:
      run:
        working-directory: app
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: "${{ github.repository }}/restaurant-recommender"
    steps:
      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value={{date 'YYYYMMDDHHmmss'}}-{{sha}}

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: "{{defaultContext}}"
          file: app/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: false